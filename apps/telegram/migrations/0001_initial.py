# Generated by Django 5.0.3 on 2024-07-11 09:01

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("account", "0001_initial"),
    ]

    operations = [
        migrations.CreateModel(
            name="ChannelDiscusion",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now=True)),
                ("updated_at", models.DateTimeField(auto_now_add=True)),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Group",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now=True)),
                ("updated_at", models.DateTimeField(auto_now_add=True)),
                (
                    "photo",
                    models.ImageField(
                        blank=True,
                        default="group.jpg",
                        null=True,
                        upload_to="telegram/channel/photos/%Y/%m/%d",
                        verbose_name="photo",
                    ),
                ),
                ("name", models.CharField(max_length=100, verbose_name="name")),
                (
                    "name_en",
                    models.CharField(max_length=100, null=True, verbose_name="name"),
                ),
                (
                    "name_ru",
                    models.CharField(max_length=100, null=True, verbose_name="name"),
                ),
                (
                    "name_uz",
                    models.CharField(max_length=100, null=True, verbose_name="name"),
                ),
                (
                    "description",
                    models.CharField(
                        blank=True,
                        max_length=150,
                        null=True,
                        verbose_name="description",
                    ),
                ),
                (
                    "description_en",
                    models.CharField(
                        blank=True,
                        max_length=150,
                        null=True,
                        verbose_name="description",
                    ),
                ),
                (
                    "description_ru",
                    models.CharField(
                        blank=True,
                        max_length=150,
                        null=True,
                        verbose_name="description",
                    ),
                ),
                (
                    "description_uz",
                    models.CharField(
                        blank=True,
                        max_length=150,
                        null=True,
                        verbose_name="description",
                    ),
                ),
                (
                    "public_link",
                    models.CharField(
                        blank=True,
                        max_length=120,
                        null=True,
                        unique=True,
                        verbose_name="public link",
                    ),
                ),
                (
                    "private_link",
                    models.CharField(
                        max_length=120, unique=True, verbose_name="private link"
                    ),
                ),
            ],
            options={
                "verbose_name": "group",
                "verbose_name_plural": "groups",
                "db_table": "groups",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="GroupMessage",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now=True)),
                ("updated_at", models.DateTimeField(auto_now_add=True)),
                ("message", models.TextField(verbose_name="message")),
                (
                    "media",
                    models.FileField(
                        blank=True,
                        null=True,
                        upload_to="telegram/groups/messages/%Y/%m/%d",
                        verbose_name="media",
                    ),
                ),
            ],
            options={
                "verbose_name": "group message",
                "verbose_name_plural": "group messages",
                "db_table": "group_messages",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="ChannelStories",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now=True)),
                ("updated_at", models.DateTimeField(auto_now_add=True)),
                (
                    "storie",
                    models.FileField(
                        upload_to="telegram/channel/stories/%Y/%m/%d",
                        verbose_name="storie",
                    ),
                ),
                (
                    "message",
                    models.CharField(
                        blank=True, max_length=100, null=True, verbose_name="message"
                    ),
                ),
            ],
            options={
                "verbose_name": "channel storie",
                "verbose_name_plural": "channel stories",
                "db_table": "channel_stories",
                "ordering": ["-created_at"],
                "indexes": [
                    models.Index(
                        fields=["created_at"], name="channel_sto_created_e79b78_idx"
                    )
                ],
            },
        ),
        migrations.CreateModel(
            name="ChannelUser",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now=True)),
                ("updated_at", models.DateTimeField(auto_now_add=True)),
                (
                    "is_owner",
                    models.BooleanField(default=False, verbose_name="is owner"),
                ),
                (
                    "is_admin",
                    models.BooleanField(default=False, verbose_name="is admin"),
                ),
                (
                    "is_active",
                    models.BooleanField(default=True, verbose_name="is active"),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="user_channel",
                        to="account.useraccount",
                    ),
                ),
            ],
            options={
                "verbose_name": "channel user",
                "verbose_name_plural": "channel users",
                "db_table": "channel_users",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="ChannelMessage",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now=True)),
                ("updated_at", models.DateTimeField(auto_now_add=True)),
                ("message", models.TextField(verbose_name="message")),
                (
                    "media",
                    models.FileField(
                        blank=True,
                        null=True,
                        upload_to="telegram/channel/messages/%Y/%m/%d",
                        verbose_name="media",
                    ),
                ),
                (
                    "discusions",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="group_discusion_channel_message",
                        to="telegram.channeldiscusion",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="channel_user_messages",
                        to="telegram.channeluser",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Channel",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now=True)),
                ("updated_at", models.DateTimeField(auto_now_add=True)),
                (
                    "photo",
                    models.ImageField(
                        blank=True,
                        default="channel.jpg",
                        null=True,
                        upload_to="telegram/channel/photos/%Y/%m/%d",
                        verbose_name="photo",
                    ),
                ),
                ("name", models.CharField(max_length=100, verbose_name="name")),
                (
                    "name_en",
                    models.CharField(max_length=100, null=True, verbose_name="name"),
                ),
                (
                    "name_ru",
                    models.CharField(max_length=100, null=True, verbose_name="name"),
                ),
                (
                    "name_uz",
                    models.CharField(max_length=100, null=True, verbose_name="name"),
                ),
                (
                    "description",
                    models.CharField(
                        blank=True,
                        max_length=150,
                        null=True,
                        verbose_name="description",
                    ),
                ),
                (
                    "description_en",
                    models.CharField(
                        blank=True,
                        max_length=150,
                        null=True,
                        verbose_name="description",
                    ),
                ),
                (
                    "description_ru",
                    models.CharField(
                        blank=True,
                        max_length=150,
                        null=True,
                        verbose_name="description",
                    ),
                ),
                (
                    "description_uz",
                    models.CharField(
                        blank=True,
                        max_length=150,
                        null=True,
                        verbose_name="description",
                    ),
                ),
                (
                    "public_link",
                    models.CharField(max_length=120, verbose_name="public link"),
                ),
                (
                    "discusions",
                    models.OneToOneField(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="discusion_channel",
                        to="telegram.channeldiscusion",
                    ),
                ),
                (
                    "messages",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="message_channel",
                        to="telegram.channelmessage",
                    ),
                ),
                (
                    "stories",
                    models.ManyToManyField(
                        blank=True,
                        related_name="stories_channel",
                        to="telegram.channelstories",
                    ),
                ),
                (
                    "users",
                    models.ManyToManyField(
                        related_name="users_channel", to="telegram.channeluser"
                    ),
                ),
            ],
            options={
                "verbose_name": "channel",
                "verbose_name_plural": "channels",
                "db_table": "channels",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="ChatUser",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now=True)),
                ("updated_at", models.DateTimeField(auto_now_add=True)),
                (
                    "is_active",
                    models.BooleanField(default=True, verbose_name="is active"),
                ),
                (
                    "user",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="user_chat",
                        to="account.useraccount",
                    ),
                ),
            ],
            options={
                "verbose_name": "chat user",
                "verbose_name_plural": "chat users",
                "db_table": "chat_users",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="ChatMessage",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now=True)),
                ("updated_at", models.DateTimeField(auto_now_add=True)),
                ("message", models.TextField(verbose_name="message")),
                (
                    "media",
                    models.FileField(
                        blank=True,
                        null=True,
                        upload_to="telegram/chat/messages/%Y/%m/%d",
                        verbose_name="media",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="user_chat_message",
                        to="telegram.chatuser",
                    ),
                ),
            ],
            options={
                "verbose_name": "chat message",
                "verbose_name_plural": "chat messages",
                "db_table": "chat_messages",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="Chat",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now=True)),
                ("updated_at", models.DateTimeField(auto_now_add=True)),
                (
                    "user_from",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="user_from_chat",
                        to="telegram.chatuser",
                    ),
                ),
                (
                    "user_to",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="user_to_chat",
                        to="telegram.chatuser",
                    ),
                ),
            ],
            options={
                "verbose_name": "chat",
                "verbose_name_plural": "chats",
                "db_table": "chats",
                "ordering": ["-created_at"],
            },
        ),
        migrations.AddField(
            model_name="channeldiscusion",
            name="group",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="group_channel_discusion",
                to="telegram.group",
            ),
        ),
        migrations.AddField(
            model_name="group",
            name="messages",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="message_group",
                to="telegram.groupmessage",
            ),
        ),
        migrations.CreateModel(
            name="GroupUser",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now=True)),
                ("updated_at", models.DateTimeField(auto_now_add=True)),
                (
                    "is_owner",
                    models.BooleanField(default=False, verbose_name="is owner"),
                ),
                (
                    "is_admin",
                    models.BooleanField(default=False, verbose_name="is admin"),
                ),
                (
                    "is_active",
                    models.BooleanField(default=True, verbose_name="is active"),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="user_group",
                        to="account.useraccount",
                    ),
                ),
            ],
            options={
                "verbose_name": "group user",
                "verbose_name_plural": "group users",
                "db_table": "group_users",
                "ordering": ["-created_at"],
            },
        ),
        migrations.AddField(
            model_name="groupmessage",
            name="user",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="group_user_messages",
                to="telegram.groupuser",
            ),
        ),
        migrations.AddField(
            model_name="group",
            name="users",
            field=models.ManyToManyField(
                related_name="users_group", to="telegram.groupuser"
            ),
        ),
        migrations.AddIndex(
            model_name="channeluser",
            index=models.Index(
                fields=["created_at"], name="channel_use_created_061354_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="channel",
            index=models.Index(
                fields=["created_at"], name="channels_created_abf1b4_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="chatuser",
            index=models.Index(
                fields=["created_at"], name="chat_users_created_54aa56_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="chatmessage",
            index=models.Index(
                fields=["created_at"], name="chat_messag_created_eb4133_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="chat",
            index=models.Index(fields=["created_at"], name="chats_created_e8f0e7_idx"),
        ),
        migrations.AddIndex(
            model_name="groupuser",
            index=models.Index(
                fields=["created_at"], name="group_users_created_dd2021_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="groupmessage",
            index=models.Index(
                fields=["created_at"], name="group_messa_created_057b41_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="group",
            index=models.Index(fields=["created_at"], name="groups_created_d34ebd_idx"),
        ),
    ]
